CREATE DEFINER=`root`@`localhost` PROCEDURE `ModificarClienteCompleto`(
    IN p_id_cliente INT,
    IN p_dni VARCHAR(255),
    IN p_cuil VARCHAR(255),
    IN p_nombre VARCHAR(255),
    IN p_apellido VARCHAR(255),
    IN p_sexo VARCHAR(255),
    IN p_id_pais INT,
    IN p_fecha_nacimiento DATE,
    IN p_direccion VARCHAR(255),
    IN p_id_localidad INT,
    IN p_id_provincia INT,
    IN p_correo VARCHAR(255),
    IN p_telefono VARCHAR(255),
    OUT p_id_generado INT  -- Salida para devolver el ID modificado o NULL si no existe
)
BEGIN
    -- Verificar si existe el cliente con el ID proporcionado
    IF EXISTS (SELECT 1 FROM clientes WHERE id = p_id_cliente) THEN
        -- Actualizar todos los campos del cliente
        UPDATE clientes
        SET 
            dni = p_dni,
            cuil = p_cuil,
            nombre = p_nombre,
            apellido = p_apellido,
            sexo = p_sexo,
            id_pais = p_id_pais,
            fecha_nacimiento = p_fecha_nacimiento,
            direccion = p_direccion,
            id_localidad = p_id_localidad,
            id_provincia = p_id_provincia,
            correo = p_correo,
            telefono = p_telefono
        WHERE id = p_id_cliente;
        
        -- Asignar el ID del cliente modificado a la variable de salida
        SET p_id_generado = p_id_cliente;
    ELSE
        -- Si no existe el cliente, asignamos NULL
        SET p_id_generado = NULL;
    END IF;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `AgregarOModifcarCliente`(  
    IN p_id_cliente INT,        
    IN p_dni VARCHAR(255),  
    IN p_cuil VARCHAR(255),  
    IN p_nombre VARCHAR(255),  
    IN p_apellido VARCHAR(255),  
    IN p_sexo VARCHAR(255),  
    IN p_id_pais INT,  
    IN p_fecha_nacimiento DATE,  
    IN p_direccion VARCHAR(255),  
    IN p_id_localidad INT,  
    IN p_id_provincia INT,  
    IN p_correo VARCHAR(255),  
    IN p_telefono VARCHAR(255),  
    OUT p_id_generado INT  -- Salida para devolver el ID  
)
BEGIN  
    DECLARE v_cliente_id INT DEFAULT NULL;  

    -- Verificar si ya existe un cliente con el mismo DNI y CUIL
    SELECT id INTO v_cliente_id   
    FROM clientes   
    WHERE dni = p_dni AND cuil = p_cuil  
    LIMIT 1;  

    IF v_cliente_id IS NOT NULL THEN  
        -- Si existe un cliente con el mismo DNI y CUIL, no se debe insertar ni actualizar
        SET p_id_generado = NULL;  -- Indica que no se insertó ni actualizó  
    ELSE  
        -- Si no existe un cliente con el mismo DNI y CUIL, procedemos a insertar el nuevo cliente
        INSERT INTO clientes (dni, cuil, nombre, apellido, sexo, id_pais, fecha_nacimiento, direccion, id_localidad, id_provincia, correo, telefono)  
        VALUES (p_dni, p_cuil, p_nombre, p_apellido, p_sexo, p_id_pais, p_fecha_nacimiento, p_direccion, p_id_localidad, p_id_provincia, p_correo, p_telefono);  

        -- Obtener el ID del cliente insertado
        SET v_cliente_id = LAST_INSERT_ID();  
        SET p_id_generado = v_cliente_id;  
    END IF;  

END

CREATE DEFINER=`root`@`localhost` PROCEDURE `EliminarCliente`(
    IN p_id INT
)
BEGIN
    -- Verificar que el cliente existe y no está eliminado
    IF EXISTS (SELECT 1 FROM clientes WHERE id = p_id AND deleted = 0) THEN
        START TRANSACTION;
            -- Realizar la baja lógica del cliente
            UPDATE clientes
            SET 
                deleted = 1,
                delete_date = NOW()
            WHERE id = p_id;
            
            -- Realizar la baja lógica del usuario asociado (si existe)
            UPDATE usuarios
            SET 
                deleted = 1,
                delete_date = NOW()
            WHERE id_cliente = p_id;
        COMMIT;
    ELSE
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El cliente no existe o ya fue eliminado.';
    END IF;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertarOActualizarUsuario`(
    IN p_id_cliente INT,
    IN p_usuario VARCHAR(255),
    IN p_pass VARCHAR(255),
    IN p_admin BIT
)
BEGIN
    DECLARE v_id INT;

    -- Verificar si el usuario ya existe por id_cliente o usuario
    SELECT `id` INTO v_id
    FROM `usuarios`
    WHERE `id_cliente` = p_id_cliente OR `usuario` = p_usuario;

    -- Si existe, se actualiza el registro
    IF v_id IS NOT NULL THEN
        UPDATE `usuarios`
        SET
            `id_cliente` = p_id_cliente, -- Actualiza el id_cliente si es necesario
            `usuario` = p_usuario,
            `pass` = p_pass,
            `admin` = p_admin,
            `create_date` = CURRENT_TIMESTAMP,
            `deleted` = 0,
            `delete_date` = NULL
        WHERE `id` = v_id; -- Asegura que se actualice el registro correcto
    ELSE
        -- Si no existe, se inserta un nuevo registro
        INSERT INTO `usuarios` (`id_cliente`, `usuario`, `pass`, `admin`, `create_date`, `deleted`)
        VALUES (p_id_cliente, p_usuario, p_pass, p_admin, CURRENT_TIMESTAMP, 0);
    END IF;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerClientes`()
BEGIN
    SELECT 
        c.id AS IdCliente,
        c.dni AS DNI,
        c.cuil AS CUIL,
        c.nombre AS Nombre,
        c.apellido AS Apellido,
        c.sexo AS Sexo,
        p.nombre AS Pais,
        pr.nombre AS Provincia,
        l.nombre AS Localidad,
        c.fecha_nacimiento AS FechaNacimiento,
        c.direccion AS Direccion,
        c.correo AS Correo,
        c.telefono AS Telefono
    FROM clientes c
    INNER JOIN paises p ON c.id_pais = p.id
    INNER JOIN provincia pr ON c.id_provincia = pr.id
    INNER JOIN localidades l ON c.id_localidad = l.id
    WHERE c.deleted = 0 -- Excluye clientes marcados como eliminados
    ORDER BY create_date DESC;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerLocalidades`()
BEGIN
    SELECT 
        id,
        nombre
 
    FROM 
        localidades;
 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerPaises`()
BEGIN
    SELECT 
        id,
        nombre
 
    FROM 
        paises;
 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerProvincias`()
BEGIN
    SELECT 
        id,
        nombre
 
    FROM 
        provincia;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerUsuarios`()
BEGIN
    SELECT 
        id,
        id_cliente,
        usuario,
        pass,
        admin
 
    FROM 
        usuarios
    WHERE 
        deleted = 0
        ORDER BY create_date DESC;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `EliminarUsuarioYCliente`(
    IN p_id INT
)
BEGIN
    DECLARE v_id_cliente INT;

    -- Verificar que el usuario exista y no esté eliminado, y obtener su id_cliente
    SELECT id_cliente
      INTO v_id_cliente
      FROM usuarios
     WHERE id = p_id
       AND deleted = 0;

    -- Si el usuario no existe o ya está eliminado, se lanza un error.
    IF v_id_cliente IS NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El usuario no existe o ya fue eliminado.';
    ELSE
        -- Opcional: Iniciar una transacción para asegurar atomicidad
        START TRANSACTION;
        
        -- Dar de baja al usuario (baja lógica)
        UPDATE usuarios
           SET deleted = 1,
               delete_date = NOW()
         WHERE id = p_id;
         
        -- Dar de baja al cliente asociado (baja lógica)
        UPDATE clientes
           SET deleted = 1,
               delete_date = NOW()
         WHERE id = v_id_cliente;
        
        COMMIT;
    END IF;
END