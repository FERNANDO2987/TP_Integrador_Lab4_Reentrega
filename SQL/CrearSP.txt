DELIMITER $$


CREATE DEFINER=`root`@`localhost` PROCEDURE `GenerarReporteMovimientosMesPorMes`(  
    IN fecha_inicio DATE,  
    IN fecha_fin DATE  
)
BEGIN  
    -- Crear una tabla temporal 
    CREATE TEMPORARY TABLE IF NOT EXISTS TempReporteMovimientos (
        Anio INT,
        Mes INT,
        Total_Ingresos DECIMAL(10,2),
        Total_Egresos DECIMAL(10,2)
    );
    
    -- Limpiar la tabla temporal antes de insertar datos
    TRUNCATE TABLE TempReporteMovimientos;
    
    -- Insertar los resultados de los movimientos en la tabla temporal
    INSERT INTO TempReporteMovimientos (Anio, Mes, Total_Ingresos, Total_Egresos)
    SELECT 
        YEAR(mov.fecha) AS Anio,
        MONTH(mov.fecha) AS Mes,
        COALESCE(SUM(CASE 
                     WHEN tm.descripcion LIKE '%%' AND mov.deleted = 0
                     THEN mov.importe ELSE 0 END), 0) AS Total_Ingresos,
        COALESCE(SUM(CASE 
                     WHEN tm.descripcion LIKE '%%' AND mov.deleted = 0
                     THEN mov.importe ELSE 0 END), 0) AS Total_Egresos
    FROM 
        Movimientos mov
    INNER JOIN TiposMovimiento tm ON mov.tipo_movimiento = tm.id
    WHERE 
        mov.fecha BETWEEN fecha_inicio AND fecha_fin
    GROUP BY 
        YEAR(mov.fecha), MONTH(mov.fecha)
    ORDER BY 
        YEAR(mov.fecha), MONTH(mov.fecha);
    
    -- Consultar los resultados desde la tabla temporal
    SELECT * FROM TempReporteMovimientos;
    
    -- Eliminar la tabla temporal 
    DROP TEMPORARY TABLE IF EXISTS TempReporteMovimientos;
END$$


CREATE DEFINER=`root`@`localhost` PROCEDURE `ActualizarCuota`(  
    IN p_cuotas_a_actualizar INT,  
    IN p_monto_a_actualizar DECIMAL(10, 2),  
    IN p_id_prestamo INT,
	IN nro_cuenta INT,
	IN detalle NVARCHAR(255)
)
BEGIN  
    DECLARE monto_existente DECIMAL(10, 2);  
    DECLARE cuotas_existentes INT;  
    DECLARE cuota_id INT; 
   DECLARE estado_pago INT DEFAULT 1;  -- 1 = Pago realizado
    DECLARE tipo_movimiento INT DEFAULT 3;  -- 3 = Tipo de movimiento (pago)
    DECLARE fecha_actual DATETIME;
    DECLARE saldo_actual DECIMAL(10, 2);
    DECLARE detalle VARCHAR(255) DEFAULT 'Pago de cuota';  -- Asegúrate de que el detalle esté definido

    -- Verificar si existe alguna cuota activa para el préstamo  
    SELECT id, monto, nro_cuota INTO cuota_id, monto_existente, cuotas_existentes  
    FROM Cuotas   
    WHERE id_prestamo = p_id_prestamo AND deleted = 0  
    ORDER BY nro_cuota  
    LIMIT 1;  -- Selecciona solo la primera cuota activa  

    -- Comprobar si se encontró la cuota  
    IF cuota_id IS NULL THEN  
        SIGNAL SQLSTATE '45000'  
        SET MESSAGE_TEXT = 'No hay cuotas activas para este préstamo.';  
    END IF;  

    -- Verificar que el monto a descontar no exceda el monto actual  
    IF p_monto_a_actualizar > monto_existente THEN  
        SIGNAL SQLSTATE '45000'  
        SET MESSAGE_TEXT = 'El monto a descontar excede el monto existente de la cuota.';  
    END IF;  

    -- Actualizar el monto de la cuota  
    SET monto_existente = monto_existente - p_monto_a_actualizar;  
    
    -- Actualizar el número de cuotas restantes  
    SET cuotas_existentes = cuotas_existentes - p_cuotas_a_actualizar;  
 
    -- Asegurarse de que el número de cuotas no sea negativo  
    IF cuotas_existentes < 0 THEN  
        SIGNAL SQLSTATE '45000'  
        SET MESSAGE_TEXT = 'El número de cuotas no puede ser negativo.';  
    END IF;  

    -- Realizar la actualización solo en la primera cuota encontrada  
    UPDATE Cuotas  
    SET monto = monto_existente,  
        nro_cuota = cuotas_existentes,  
        fecha_pago = NOW()  
    WHERE id = cuota_id;  -- Actualiza solo la primera cuota encontrada 
    
    
        -- Obtener el saldo actual de la cuenta
    SELECT cu.saldo
    FROM cuentas cu
    WHERE nro_cuenta = nro_cuenta and deleted = 0
    LIMIT 1;



    -- Actualizar el saldo de la cuenta después del pago
    UPDATE Cuentas
    SET saldo = saldo - p_monto_a_actualizar
    WHERE nro_cuenta = nro_cuenta AND deleted = 0;

    -- Insertar el movimiento en la tabla Movimientos
    SET fecha_actual = CURRENT_TIMESTAMP;

    INSERT INTO Movimientos (fecha, detalle, importe, tipo_movimiento, nro_cuenta, estado, createDate, deleted)
    VALUES (fecha_actual, detalle, p_monto_a_actualizar, tipo_movimiento, nro_cuenta, estado_pago, fecha_actual, 0);

    -- Confirmar transacción
    COMMIT;
    

END$$


CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerDatosClientePrestamo`(IN ClienteId INT)
BEGIN
    SELECT   
        c.id AS cliente_id,  
        p.id AS prestamo_id,  
        p.fecha_solicitud,  
        p.nro_cuenta AS numero_cuenta,
        p.cuotas AS cuotas_prestamo, -- cantidad de cuotas en que se solicitó el préstamo
        pr.nro_cuota,  -- que se está pagando
        pr.monto AS monto_cuota,
        pr.fecha_pago, 
        co.saldo AS cuenta_saldo -- saldo a pagar del préstamo solicitado 
    FROM   
        Clientes c  
    LEFT JOIN   
        Prestamos p ON c.id = p.id_cliente  
    LEFT JOIN   
        Cuotas pr ON p.id = pr.id_prestamo  
    LEFT JOIN   
        Cuentas co ON c.id = co.id_cliente  
    WHERE   
        c.id = ClienteId;
END$$


CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerCuotasPagadasYPendientesPorMes`(
    IN fechaDesde DATE,
    IN fechaHasta DATE
)
BEGIN
    SELECT 
        YEAR(cu.fecha_pago) AS Anio,   -- Año como entero
        MONTH(cu.fecha_pago) AS Mes,   -- Mes como entero
        SUM(cu.monto) AS TotalPagado,
        (pr.importe - SUM(cu.monto)) AS TotalPendiente
    FROM 
        Cuotas cu
    INNER JOIN 
        Prestamos pr ON cu.id_prestamo = pr.id
    WHERE 
        cu.deleted = 0 
        AND pr.deleted = 0
        AND cu.fecha_pago BETWEEN fechaDesde AND fechaHasta
    GROUP BY 
        YEAR(cu.fecha_pago), MONTH(cu.fecha_pago), pr.id  -- Agrupando por año y mes
    ORDER BY 
        Anio, Mes;  -- Ordenando por año y mes
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `ObtenerCuotasPagadasPorMesConClientes`()
BEGIN
    SELECT 
        DATE_FORMAT(cu.fecha_pago, '%Y-%m') AS Mes,
        cl.nombre AS NombreCliente,
        cl.apellido AS ApellidoCliente,
        SUM(cu.monto) AS TotalPagado
    FROM 
        Cuotas cu
    INNER JOIN 
        Prestamos pr ON cu.id_prestamo = pr.id
    INNER JOIN 
        Clientes cl ON pr.id_cliente = cl.id
    WHERE 
        cu.deleted = 0 -- Excluye cuotas marcadas como eliminadas
        AND pr.deleted = 0 -- Excluye préstamos eliminados
        AND cl.deleted = 0 -- Excluye clientes eliminados
    GROUP BY 
        DATE_FORMAT(cu.fecha_pago, '%Y-%m'), cl.id
    ORDER BY 
        Mes, NombreCliente, ApellidoCliente;
END$$

CREATE PROCEDURE ObtenerDatosPrestamos()
BEGIN  
    SELECT   
        p.id AS id,  
        cl.nombre AS Nombre,  
        cl.apellido AS Apellido,  
        cl.correo AS Correo,  
        cl.telefono AS Telefono,  
        cu.cbu AS CBU,  
        c.monto AS Monto,  
        p.cuotas AS Cuotas,  
        c.nro_cuota AS NumeroCuota,  
        p.fecha_solicitud AS FechaSolicitud,  
        p.importe AS Importe,  
        p.cuotas AS TotalCuotas,  
        p.observaciones AS Observaciones,  
        CASE   
    WHEN p.estado = 0 THEN 'Rechazado'  
    WHEN p.estado = 1 THEN 'Autorizado'  
    ELSE 'Pendiente'  
END AS Estado
    FROM   
        bdbanco.prestamos p  
    JOIN   
        bdbanco.clientes cl ON p.id_cliente = cl.id  
    JOIN   
        bdbanco.cuentas cu ON p.nro_cuenta = cu.nro_cuenta AND cu.deleted = 0  
    LEFT JOIN   
        bdbanco.cuotas c ON p.id = c.id_prestamo AND c.deleted = 0  
    WHERE   
        p.deleted = 0  
    ORDER BY   
        p.fecha_solicitud DESC;  -- Ordenar por fecha de solicitud, más reciente primero  
END$$

CREATE PROCEDURE ObtenerClientePorId(
    IN Id INT
)
BEGIN
    SELECT 
        c.Id, c.Dni, c.Cuil, c.Nombre, c.Apellido, c.Sexo, c.Usuario, c.Password,
        p.Id AS PaisNacimientoId, p.Nombre AS PaisNacimientoNombre,
        c.fecha_nacimiento, c.Correo, c.Telefono, c.Celular, c.Admin
    FROM Clientes c
    LEFT JOIN Paises p ON c.pais = p.Id
    WHERE c.Id = Id AND c.deleted = 0;
END$$



CREATE PROCEDURE ObtenerPaisPorID(
    IN PaisID INT
)
BEGIN
    SELECT * 
    FROM Paises 
    WHERE deleted = 0 
      AND PaisID = @PaisID;
END$$


-- Procedimiento para validar usuario
CREATE PROCEDURE ValidarUsuario(IN usuarioIngresado VARCHAR(50), IN contraseniaIngresada VARCHAR(50)) 
BEGIN
    SELECT * FROM clientes
    WHERE usuario = usuarioIngresado AND password = contraseniaIngresada;
END$$

-- Procedimiento para modificar cuenta
CREATE PROCEDURE ModificarCuenta (IN nroCuentaIngresado INT, IN idTipoCuentaIngresado INT, IN borrado BIT)
BEGIN
	UPDATE Cuentas SET id_tipo_cuenta = idTipoCuentaIngresado, deleted = borrado WHERE nro_cuenta = nroCuentaIngresado;
END$$

-- Procedimiento para listar cuenta por número de cuenta
CREATE PROCEDURE ListarCuentaXNroCuenta (IN nroCuenta INT)
BEGIN
	SELECT cuentas.nro_cuenta, cuentas.cbu, cuentas.id_cliente, clientes.nombre, clientes.apellido, cuentas.id_tipo_cuenta, tiposcuenta.descripcion,  cuentas.saldo, cuentas.deleted 
	FROM cuentas 
	LEFT JOIN clientes ON clientes.id = cuentas.id_cliente 
	LEFT JOIN tiposcuenta ON tiposcuenta.id = cuentas.id_tipo_cuenta 
	WHERE nro_cuenta = nroCuenta;
END$$

-- Procedimiento para listar todas las cuentas
CREATE PROCEDURE ListarCuentas()
BEGIN
	SELECT nro_cuenta, id_cliente, fecha_creacion, id_tipo_cuenta, tiposcuenta.descripcion AS descripcion, cbu, saldo, cuentas.deleted AS borrado 
	FROM cuentas 
	LEFT JOIN tiposcuenta ON tiposcuenta.id = id_tipo_cuenta; 
END$$

-- Procedimiento para eliminar cuenta
CREATE PROCEDURE EliminarCuenta (IN nroCuentaIngresado INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SELECT 'Ocurrio un error' AS mensaje;
	END;
	START TRANSACTION;
	UPDATE cuentas SET deleted = 1, deleteDate = CURDATE() WHERE nro_cuenta = nroCuentaIngresado;
	COMMIT;
END$$

-- Procedimiento para agregar cuenta
CREATE PROCEDURE AgregarCuenta(
	IN idClienteIngresado INT,
	IN idTipoCuentaIngresada INT
)
BEGIN
	DECLARE cuentasActivas INT DEFAULT 0;
	DECLARE ultimoNroCuenta INT DEFAULT 0;
	DECLARE ultimoIdMovimiento INT DEFAULT 0;
	DECLARE saldo INT DEFAULT 0;
    DECLARE error_msg TEXT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
        error_msg = MESSAGE_TEXT;
        Select error_msg;
		ROLLBACK;
	END;

	START TRANSACTION;
	SELECT COUNT(*) INTO cuentasActivas 
	FROM cuentas 
	WHERE id_cliente = idClienteIngresado AND deleted = 0;

	IF cuentasActivas < 3 THEN
		INSERT INTO cuentas (id_cliente, fecha_creacion, id_tipo_cuenta, cbu, saldo, createDate, deleteDate, deleted)
		VALUES (idClienteIngresado, CURDATE(), idTipoCuentaIngresada, REPLACE(REPLACE(REPLACE(DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), '-', ''), ':', ''), ' ', ''), 0, CURDATE(), NULL, 0);

		SELECT LAST_INSERT_ID() INTO ultimoNroCuenta;
		INSERT INTO movimientos(fecha, detalle, importe, tipo_movimiento, nro_cuenta, estado, createDate, deleted) 
		VALUES (CURDATE(), 'Alta de Cuenta', 10000, 1, ultimoNroCuenta, 1, CURDATE(), 0);

		UPDATE cuentas SET saldo = saldo + 10000 WHERE nro_cuenta = ultimoNroCuenta;
	ELSE
		SELECT 'Se excedio el limite de cuentas' AS mensaje;
	END IF;

	COMMIT;
END$$

-- Procedimientos adicionales para clientes, países y usuarios
CREATE PROCEDURE AgregarCliente(
    IN p_id INT,
    IN p_dni NVARCHAR(255),
    IN p_cuil NVARCHAR(255),
    IN p_nombre NVARCHAR(255),
    IN p_apellido NVARCHAR(255),
    IN p_sexo NVARCHAR(50),
    IN p_usuario NVARCHAR(255),
    IN p_password NVARCHAR(255),
    IN p_pais_nacimiento NVARCHAR(255),
    IN p_fecha_nacimiento DATE,
    IN p_correo NVARCHAR(255),
    IN p_telefono NVARCHAR(255),
    IN P_celular NVARCHAR(255),
    IN p_admin BOOLEAN
)
BEGIN
    -- Verificar si ya existe un cliente con el mismo DNI o CUIL
    IF EXISTS (SELECT 1 FROM Clientes WHERE (dni = p_dni OR cuil = p_cuil) AND (id <> p_id OR p_id IS NULL) AND deleted = 0) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: Ya existe un cliente con el mismo DNI o CUIL.';
    ELSE
        -- Si el ID ya existe, actualizar el cliente
        IF p_id IS NOT NULL AND EXISTS (SELECT 1 FROM Clientes WHERE id = p_id) THEN
            UPDATE Clientes 
            SET 
                dni = p_dni, 
                cuil = p_cuil, 
                nombre = p_nombre, 
                apellido = p_apellido, 
                sexo = p_sexo, 
                usuario = p_usuario, 
                password = p_password, 
                pais = p_pais_nacimiento, 
                fecha_nacimiento = p_fecha_nacimiento,
				correo = p_correo,
                telefono = p_telefono,
                celular = p_celular,
                admin = p_admin, 
                deleteDate = NULL, 
                deleted = 0 
            WHERE id = p_id;
        ELSE
            -- Si el ID no existe, insertar un nuevo cliente
            INSERT INTO Clientes (dni, cuil, nombre, apellido, sexo, usuario, password, pais, fecha_nacimiento,correo,telefono,celular, admin, deleteDate, deleted, createDate) 
            VALUES 
            (p_dni, p_cuil, p_nombre, p_apellido, p_sexo, p_usuario, p_password, p_pais_nacimiento, p_fecha_nacimiento,p_correo,p_telefono,p_celular, p_admin, NULL, 0, CURRENT_TIMESTAMP);
            
            -- Retornar el ID del nuevo cliente insertado
            SELECT LAST_INSERT_ID() AS nuevo_id;
        END IF;
    END IF;
END$$

CREATE PROCEDURE AgregarPais(
	IN p_id INT,
	IN p_nombre NVARCHAR(255)
)
BEGIN
	IF p_id IS NOT NULL AND EXISTS (SELECT * FROM Paises WHERE id = p_id) THEN
		UPDATE Paises SET nombre = p_nombre, deleteDate = NULL, deleted = 0 WHERE id = p_id;
	ELSE
		INSERT INTO Paises (nombre, createDate, deleteDate, deleted) 
		VALUES (p_nombre, CURRENT_TIMESTAMP, NULL, 0);
		SELECT LAST_INSERT_ID() AS nuevo_id;
	END IF;
END$$



CREATE PROCEDURE ObtenerPaises()
BEGIN
	SELECT * FROM Paises WHERE deleted = 0;
END$$


CREATE PROCEDURE ObtenerClientes()
BEGIN
    SELECT 
        c.Id,
        c.Dni,
        c.Cuil,
        c.Nombre,
        c.Apellido,
        c.Sexo,
        c.Usuario,
        c.Password,
        c.pais,  -- Suponiendo que esta columna esté en la tabla Clientes
        p.Nombre AS PaisNacimientoNombre, -- Nombre del país
        c.fecha_nacimiento,
        c.Correo,
        c.Telefono,
        c.Celular,
        c.Admin
    FROM 
        clientes c
    LEFT JOIN 
        paises p ON c.pais = p.Id;
END$$



CREATE PROCEDURE EliminarCliente(
    IN p_id INT
)
BEGIN
    -- Verificar si el cliente existe
    IF EXISTS (SELECT 1 FROM Clientes WHERE id = p_id AND deleted = 0) THEN
        -- Realizar la baja lógica
        UPDATE clientes
        SET 
            deleted = 1,
            deleteDate = NOW()
        WHERE id = p_id;
    ELSE
        -- Lanzar un error si el cliente ya está eliminado o no existe
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El cliente no existe o ya fue eliminado.';
    END IF;
END$$

-- Recibir Cuenta Origen, Cuenta Destino, Monto
CREATE PROCEDURE transferir(IN cuentaOrigen INT, IN cuentaDestino INT, IN monto DECIMAL, IN detalleTransferencia VARCHAR(255))
BEGIN
	DECLARE saldoOrigen DECIMAL DEFAULT 0;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SELECT 'Ocurrio un error' AS mensaje;
	END;
    -- Iniciar la transaccion
    START TRANSACTION;
		SELECT saldo FROM cuentas WHERE cuentas.nro_cuenta = CuentaOrigen INTO saldoOrigen;
	-- Chequear que el Origen tenga el Monto
        IF (saldoOrigen - monto) >= 0 THEN
			-- Dar de Baja Origen (Movimiento e impacto en Saldo)
            INSERT INTO movimientos (fecha, detalle, importe, tipo_movimiento, nro_cuenta, estado, deleted) values
            (CURDATE(), detalleTransferencia, (monto * -1), 4, cuentaOrigen, 1, 0);
            UPDATE cuentas SET saldo = saldo - monto where cuentas.nro_cuenta = cuentaOrigen;
            -- Dar de Alta Destino (Movimiento e impacto en Saldo)
            INSERT INTO movimientos (fecha, detalle, importe, tipo_movimiento, nro_cuenta, estado, deleted) values
            (CURDATE(), detalleTransferencia, monto, 4, cuentaDestino, 1, 0);
            UPDATE cuentas SET saldo = saldo + monto where cuentas.nro_cuenta = cuentaDestino;
        END IF;
    COMMIT;
END;
$$

CREATE PROCEDURE ObtenerCuentasXIdCliente(IN idCliente INT)
BEGIN
	SELECT * FROM cuentas LEFT JOIN tiposcuenta ON tiposcuenta.id = cuentas.id_tipo_cuenta WHERE cuentas.id_cliente = idCliente;
END;
$$

CREATE PROCEDURE obtenerClienteXUsuario(IN usuarioElegido VARCHAR(255))
BEGIN
	 SELECT 
        c.Id, c.Dni, c.Cuil, c.Nombre,
        c.Apellido, c.Sexo, c.Usuario, c.Password,
        c.pais, c.fecha_nacimiento, c.Correo, c.Telefono,
        c.Celular, c.Admin, c.deleted as borrado
    FROM Clientes c
    WHERE c.Usuario = usuarioElegido;
END;
$$

CREATE PROCEDURE obtenerCuentaXCBU(IN cbuElegido VARCHAR(255))
BEGIN
	SELECT cuentas.nro_cuenta, cuentas.cbu, cuentas.id_cliente, clientes.nombre, clientes.apellido, cuentas.id_tipo_cuenta, tiposcuenta.descripcion, cuentas.deleted 
	FROM cuentas 
	LEFT JOIN clientes ON clientes.id = cuentas.id_cliente 
	LEFT JOIN tiposcuenta ON tiposcuenta.id = cuentas.id_tipo_cuenta 
	WHERE cuentas.cbu = cbuElegido;
END;
$$

CREATE PROCEDURE ListarCuentasXCliente(
	IN p_IdCliente INT
)
BEGIN
	SELECT nro_cuenta, 
    id_cliente, 
    fecha_creacion, 
    id_tipo_cuenta, 
    tiposcuenta.descripcion AS descripcion,
    cbu, 
    saldo, 
    cuentas.deleted AS borrado 
	FROM cuentas 
	LEFT JOIN tiposcuenta ON tiposcuenta.id = id_tipo_cuenta 
    where cuentas.deleted = 0 and p_IdCliente = id_cliente;
    
END$$

CREATE PROCEDURE obtenerCountCuentasXCliente (IN idClienteIngresado INT)
BEGIN
	select count(*) from cuentas where cuentas.id_cliente = idClienteIngresado and deleted = 0;
END;
$$

DELIMITER ;
;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AgregarPrestamo`(
    IN p_nro_cuenta INT,
    IN p_id_cliente INT,
    IN p_importe DECIMAL(10,2),
    IN p_cuotas INT
)
BEGIN
    INSERT INTO prestamos (
        nro_cuenta, 
        id_cliente, 
        fecha_solicitud, 
        importe, 
        cuotas
    )
    VALUES (
         p_nro_cuenta, 
         p_id_cliente, 
         CURRENT_DATE, 
         p_importe, 
         p_cuotas
     );
 END$$
 DELIMITER ;

-- AprobarPrestamo_2 
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `AprobarPrestamo`(
    IN p_id INT,
    IN p_observaciones VARCHAR(255)
)
BEGIN
    DECLARE v_importe DECIMAL(10,2);  -- almacenar importe préstamo
    DECLARE v_nro_cuenta INT;
    DECLARE v_estado INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        ROLLBACK; 
    -- Iniciar la transacción
    START TRANSACTION;
    
	-- Obtener nro de cuenta
	SELECT nro_cuenta 
    INTO v_nro_cuenta
    FROM prestamos
    WHERE id = p_id;
    
			-- Verificar la cuenta existe y obtener el numero
    IF v_nro_cuenta IS NULL THEN
        -- Si la cuenta no existe, salir
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR';
    END IF;
    
    -- Obtener estado del prestamo
	SELECT estado 
    INTO v_estado
    FROM prestamos
    WHERE id = p_id;
    
			-- Verificar si el prestamo ya fue aprobado/rechazado
    IF v_estado IN (0, 1) THEN
        -- Si el prestamo ya fue gestionado, salir
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR';
    END IF;
    
    
    -- Obtener el importe desde la tabla prestamos
    SELECT importe 
    INTO v_importe
    FROM prestamos
    WHERE id = p_id;
    
			-- Verificar si el préstamo existe y obtener el importe
    IF v_importe IS NULL THEN
        -- Si el préstamo no existe, salir
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR';
    END IF;
        
    

    -- Llamar a AgregarMovimiento 
    INSERT INTO movimientos (
        fecha, 
        detalle, 
        importe, 
        nro_cuenta,
        tipo_movimiento, 
        estado
    )
    VALUES (
        current_date(), 
        'Prestamo Aprobado', 
        v_importe, 
        v_nro_cuenta,
        2, 
        b'1'
    );


-- Actualizar el estado del préstamo a "aprobado" y asociar el movimiento
    UPDATE prestamos
    SET estado = 1 , observaciones = p_observaciones -- Cambiar el estado a aprobado
    WHERE id = p_id;

	-- Sumar dinero a la cuenta
    UPDATE cuentas
    SET saldo = saldo + v_importe
    WHERE nro_cuenta = v_nro_cuenta;
    
    
    COMMIT;

END$$

DELIMITER ;


-- Listar movimientos X cuenta
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ListarMovimientosXCuenta`(
	IN p_nroCuenta BIGINT
)
BEGIN
	SELECT 
		M.ID,
		NRO_CUENTA,
        IMPORTE,
        TIPO_MOVIMIENTO,
        T.DESCRIPCION AS DESCRIPCION,
        DETALLE,
        FECHA,
        ESTADO
	FROM MOVIMIENTOS M 
	LEFT JOIN TIPOSMOVIMIENTO T ON T.id = M.TIPO_MOVIMIENTO 
	WHERE NRO_CUENTA = p_nroCuenta;
END

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE BuscarPorCriterio(
    IN criterio INT,
    IN valorBusqueda VARCHAR(255)
)
BEGIN
    DECLARE filtro VARCHAR(255);

    IF criterio = 1 THEN
        SET filtro = CONCAT(valorBusqueda, '%');
    ELSEIF criterio = -1 THEN
        SET filtro = CONCAT('%', valorBusqueda);
    ELSEIF criterio = 0 THEN
        SET filtro = CONCAT('%', valorBusqueda, '%');
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Criterio no válido. Debe ser 0, 1, o -1';
    END IF;

    SELECT nro_cuenta, id_cliente, fecha_creacion, id_tipo_cuenta, tiposcuenta.descripcion AS descripcion, cbu, saldo, cuentas.deleted AS borrado, CONCAT(clientes.nombre,' ',clientes.apellido)  AS nombreapellido
	FROM cuentas 
	LEFT JOIN tiposcuenta ON tiposcuenta.id = id_tipo_cuenta
    LEFT JOIN clientes ON clientes.id = id_cliente
    WHERE CONCAT(clientes.nombre, ' ', clientes.apellido) LIKE filtro;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE ObtenerClientesConFiltro(
    IN criterio INT,
    IN valorBusqueda VARCHAR(255)
)
BEGIN
    DECLARE filtro VARCHAR(255);

    -- Definir el filtro según el criterio
    IF criterio = 1 THEN
        SET filtro = CONCAT(valorBusqueda, '%');  -- Busca al principio (LIKE 'valorBusqueda%')
    ELSEIF criterio = -1 THEN
        SET filtro = CONCAT('%', valorBusqueda);  -- Busca al final (LIKE '%valorBusqueda')
    ELSEIF criterio = 0 THEN
        SET filtro = CONCAT('%', valorBusqueda, '%');  -- Busca en cualquier parte (LIKE '%valorBusqueda%')
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Criterio no válido. Debe ser 0, 1 o -1';
    END IF;

    -- Realizamos la consulta con el filtro aplicado
    SELECT 
        id AS id_cliente,
        dni,
        cuil,
        nombre,
        apellido,
        sexo,
        usuario,
        password,
        pais AS pais_nacimiento,
        fecha_nacimiento,
        correo,
        telefono,
        celular,
        admin
    FROM clientes
    WHERE dni LIKE filtro;
END$$

DELIMITER ;
